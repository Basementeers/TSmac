//! Defines how Tarmac generates Lua code for linking to assets.
//!
//! Tarmac uses structs with `Display` impls to build up templates.

use std::fmt;

use crate::data::ImageSlice;

const CODEGEN_HEADER: &str =
    "-- This file was @generated by Tarmac. It is not intended for manual editing.";

/// Codegen template for CodegenKind::AssetUrl
pub(crate) struct AssetUrlTemplate {
    pub id: u64,
}

impl fmt::Display for AssetUrlTemplate {
    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
        writeln!(formatter, "{}", CODEGEN_HEADER)?;
        writeln!(formatter, "return \"rbxassetid://{}\"", self.id)?;

        Ok(())
    }
}

pub(crate) struct UrlAndSliceTemplate {
    pub id: u64,
    pub slice: Option<ImageSlice>,
}

impl fmt::Display for UrlAndSliceTemplate {
    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
        writeln!(formatter, "{}", CODEGEN_HEADER)?;

        writeln!(formatter, "return {{")?;
        writeln!(formatter, "\tImage = \"rbxassetid://{}\",", self.id)?;

        if let Some(slice) = self.slice {
            let offset = slice.min();
            let size = slice.size();

            writeln!(
                formatter,
                "\tImageRectOffset = Vector2.new({}, {}),",
                offset.0, offset.1
            )?;
            writeln!(
                formatter,
                "\tImageRectSize = Vector2.new({}, {}),",
                size.0, size.1
            )?;
        }

        writeln!(formatter, "}}")?;

        Ok(())
    }
}
